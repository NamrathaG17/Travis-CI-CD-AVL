/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 11 23:50:28 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert((-967));
      aVLTree0.insert((-2120));
      aVLTree0.insert((-1));
      aVLTree0.find(5466);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-947));
      aVLTree0.height();
      aVLTree0.delete((-967));
      aVLTree0.getRoot();
      aVLTree0.delete((-967));
      aVLTree0.find(1331);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert(3343);
      aVLTree0.delete(0);
      aVLTree0.insert((-1707));
      aVLTree0.delete(0);
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.delete(1);
      aVLTree0.insert(0);
      aVLTree0.insert((-2850));
      aVLTree0.delete((-1536));
      aVLTree0.delete(0);
      aVLTree0.find(0);
      aVLTree0.height();
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree_Node0.left = null;
      aVLTree0.find((-1628));
      aVLTree0.insert(0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree_Node0.height = (-1519);
      aVLTree0.find(1561);
      aVLTree0.getBalance((AVLTree.Node) null);
      // Undeclared exception!
      try { 
        aVLTree0.delete(1862);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1));
      aVLTree0.height();
      aVLTree0.insert((-1));
      aVLTree0.delete((-1));
      aVLTree0.insert((-1972));
      aVLTree0.delete((-1));
      aVLTree0.insert(969);
      aVLTree0.delete(1);
      aVLTree0.insert(628);
      aVLTree0.insert((-1));
      aVLTree0.insert(534);
      aVLTree0.delete(628);
      aVLTree0.delete((-1972));
      aVLTree0.delete((-1));
      aVLTree0.delete(1);
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.insert(1);
      aVLTree0.delete(1);
      aVLTree0.insert((-1));
      aVLTree0.getRoot();
      aVLTree0.delete(534);
      aVLTree0.delete((-1972));
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.insert(0);
      aVLTree0.delete(1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-24));
      int int0 = (-1937);
      aVLTree0.delete((-1937));
      int int1 = 0;
      aVLTree0.insert(0);
      aVLTree0.insert((-1826));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree_Node1.right = aVLTree_Node0;
      int int2 = 0;
      // Undeclared exception!
      try { 
        aVLTree0.insert(int2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      
      aVLTree0.delete(0);
      aVLTree0.insert(1);
      aVLTree0.insert(0);
      aVLTree0.insert((-1188));
      aVLTree0.delete(3141);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      int int0 = 1992;
      aVLTree0.delete(1992);
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree_Node0.height = 0;
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.left = aVLTree_Node1;
      int int1 = 0;
      aVLTree_Node1.height = 1887;
      aVLTree_Node1.height = 1992;
      aVLTree_Node1.key = 0;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree_Node0.right = aVLTree_Node1;
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      aVLTree_Node1.right = aVLTree_Node2;
      aVLTree_Node1.right = aVLTree_Node0;
      aVLTree0.height();
      // Undeclared exception!
      aVLTree0.find((-1993));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 0;
      int int1 = 0;
      aVLTree0.insert(0);
      aVLTree0.insert((-1595));
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(403);
      aVLTree0.insert(2669);
      aVLTree0.insert((-1));
      aVLTree0.insert(0);
      aVLTree0.delete(2540);
      aVLTree0.delete(0);
      aVLTree0.delete((-1));
      aVLTree0.getRoot();
      aVLTree0.insert(0);
      aVLTree0.getRoot();
      // Undeclared exception!
      try { 
        aVLTree0.delete(2669);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1300);
      aVLTree0.delete(1255);
      aVLTree0.insert(0);
      aVLTree0.delete((-39));
      aVLTree0.insert(364);
      aVLTree0.delete(1296);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(3143);
      int int0 = 0;
      aVLTree0.find(0);
      aVLTree0.insert(363);
      aVLTree0.insert(0);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = (-967);
      aVLTree0.insert((-967));
      aVLTree0.insert((-2120));
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-967));
      // Undeclared exception!
      try { 
        aVLTree0.delete((-967));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert((-4383));
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.find(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      aVLTree0.getRoot();
      aVLTree0.delete((-1));
      aVLTree0.insert(1);
      aVLTree0.height();
      aVLTree0.delete((-1));
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-2743));
      aVLTree0.insert(0);
      aVLTree0.insert(1202);
      aVLTree0.delete(1);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(114);
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1332));
      aVLTree0.delete((-1332));
      aVLTree0.delete((-1332));
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      aVLTree0.insert(0);
      aVLTree0.find(0);
      aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree0.find((-1332));
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete((-1));
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.find((-1821));
      aVLTree0.find((-1821));
      aVLTree0.delete((-1821));
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.delete(0);
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert((-1081));
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.insert(2899);
      aVLTree0.insert(0);
      aVLTree0.find((-1081));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 1;
      aVLTree0.insert(1898);
      aVLTree0.insert(1);
      int int1 = 0;
      // Undeclared exception!
      try { 
        aVLTree0.insert(1898);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1681);
      aVLTree0.insert(0);
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.delete(1);
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert(483);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1012);
      aVLTree0.insert((-2079));
      aVLTree0.delete(1);
      aVLTree0.find((-2079));
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.getRoot();
      aVLTree0.find(977);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert((-972));
      aVLTree0.insert((-2120));
      aVLTree0.insert((-1));
      aVLTree0.find((-1));
      aVLTree0.getRoot();
      aVLTree0.delete((-972));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.insert(1485);
      int int0 = (-1);
      aVLTree0.delete((-1));
      int int1 = 0;
      aVLTree0.insert(5505);
      aVLTree0.insert((-1));
      aVLTree0.insert(0);
      // Undeclared exception!
      try { 
        aVLTree0.insert(5505);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert(1181);
      aVLTree0.insert(1);
      aVLTree0.delete(1181);
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getBalance((AVLTree.Node) null);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertNull(aVLTree_Node0);
  }
}
